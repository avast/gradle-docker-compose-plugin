plugins {
    id 'signing'
    id 'io.github.gradle-nexus.publish-plugin' version '2.0.0'
    id 'com.gradle.plugin-publish' version '1.3.0'
}

apply plugin: 'groovy'
apply plugin: 'java'
apply plugin: 'java-library'
apply plugin: 'maven-publish'

group = 'com.avast.gradle'
version = version == 'unspecified' ? 'DEVELOPER-SNAPSHOT' : version
base {
    archivesName = 'gradle-docker-compose-plugin'
}
java {
    sourceCompatibility = JavaVersion.VERSION_1_8
}

repositories {
    mavenCentral()
}

dependencies {
    implementation gradleApi()
    implementation 'org.yaml:snakeyaml:2.3'
    testImplementation gradleTestKit()
    testImplementation 'org.spockframework:spock-core:2.3-groovy-3.0'
}

test {
    useJUnitPlatform()
    testLogging {
        events 'failed'
        exceptionFormat 'full'
    }
}

java {
    withJavadocJar()
    withSourcesJar()
}

afterEvaluate {
    publishing.publications.forEach {
        it.pom {
            name = 'Gradle Docker Compose plugin'
            description = 'Simplifies usage of Docker Compose for integration testing in Gradle environment.'
            url = 'https://github.com/avast/gradle-docker-compose-plugin'
            licenses {
                license {
                    name = 'The MIT License'
                    url = 'http://www.opensource.org/licenses/mit-license.php'
                }
            }
            developers {
                developer {
                    id = 'augi'
                    name = 'Michal August√Ωn'
                    email = 'augustyn.michal@gmail.com'
                }
            }
            scm {
                connection = 'scm:git:git://github.com/avast/gradle-docker-compose-plugin.git'
                developerConnection = 'scm:git:ssh://github.com/avast/gradle-docker-compose-plugin.git'
                url = 'https://github.com/avast/gradle-docker-compose-plugin'
            }
        }
    }
}

signing {
    String base64Key = System.getenv('SIGNING_KEY')
    if (base64Key) {
        useInMemoryPgpKeys(new String(Base64.decoder.decode(base64Key)), System.getenv('SIGNING_PASSWORD'))
        sign publishing.publications
    }
}

nexusPublishing {
    repositories {
        sonatype()
    }
    transitionCheckOptions {
        maxRetries.set(256)
    }
}


project.ext.set('gradle.publish.key', System.getenv('GRADLE_PORTAL_KEY'))
project.ext.set('gradle.publish.secret', System.getenv('GRADLE_PORTAL_SECRET'))

gradlePlugin {
    website = 'https://github.com/avast/gradle-docker-compose-plugin'
    vcsUrl = 'https://github.com/avast/gradle-docker-compose-plugin'
    plugins {
        dockerComposePlugin {
            id = 'com.avast.gradle.docker-compose'
            displayName = 'Gradle Docker Compose plugin'
            description = 'Simplifies usage of Docker Compose for integration testing in Gradle environment.'
            implementationClass = 'com.avast.gradle.dockercompose.DockerComposePlugin'
            tags.set(['docker', 'docker-compose'])
        }
    }
}
